// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  isAdmin Boolean @default(false) @map("is_admin")

  name       String @unique
  avatarPath String @default("/uploads/default-avatar.png") @map("avatar_path")

  phone     String    @default("")
  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  wirelessInterfaces      String? @map("wireless_interfaces") // Беспроводные интерфейсы
  mainCamera              String? @map("main_camera") // Разрешение основной камеры
  os                      String? // Операционная система
  screenResolution        String? @map("screen_resolution") // Разрешение экрана
  displayUpdateRate       String? @map("display_update_rate") // Частота обновления экрана
  numberMainCameras       String? @map("number_main_cameras") // Количество основных камер
  mainCameraFeatures      String? @map("main_camera_features") // Характеристики основной камеры
  mainCameraFeaturesTwo   String? @map("main_camera_features_two") // Характеристики основной камеры 2
  mainCameraFeaturesThree String? @map("main_camera_features_three") // Характеристики основной камеры 3
  NumberSIMCards          String? @map("number_sim_cards") // Количество SIM-карт
  BatteryCapacity         String? @map("battery_capacity") // Емкость аккумулятора
  videotaping             String? @map("videotaping") // Видеосъемка
  screenFeatures          String? @map("screen_features") // Особенности экрана
  ppi                     String? // Число пикселей на дюйм (PPI)

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  storageCapacity   StorageCapacity? @relation(fields: [storageCapacityId], references: [id])
  storageCapacityId Int?             @map("storage_capacity_id")

  colors   Colors? @relation(fields: [colorsId], references: [id])
  colorsId Int?    @map("colors_id")

  models   Models? @relation(fields: [modelsId], references: [id])
  modelsId Int?    @map("models_id")

  communicationOptions   CommunicationOptions? @relation(fields: [communicationOptionsId], references: [id])
  communicationOptionsId Int?                  @map("communication_options_id")

  cpu   CPU? @relation(fields: [cpuId], references: [id])
  cpuId Int? @map("cpu_id")

  gpu   GPU? @relation(fields: [gpuId], references: [id])
  gpuId Int? @map("gpu_id")

  ram   RAM? @relation(fields: [ramId], references: [id])
  ramId Int? @map("ram_id")

  diagonal   Diagonal? @relation(fields: [diagonalId], references: [id])
  diagonalId Int?      @map("diagonal_id")

  size   Size? @relation(fields: [sizeId], references: [id])
  sizeId Int?  @map("size_id")

  strapType   StrapType? @relation(fields: [strapTypeId], references: [id])
  strapTypeId Int?       @map("strap_type_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name   String  @unique
  slug   String  @unique
  images String?

  products Product[]
  models   Models[]
}

model StorageCapacity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Colors {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  colorCod String @map("color_cod")
  slug     String @unique

  products Product[]
}

model Models {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  products Product[]
}

model CommunicationOptions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model CPU {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model GPU {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model RAM {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Diagonal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Size {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model StrapType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
